// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<App /> should render 1`] = `
<ApolloProvider
  client={
    ApolloClient {
      "cache": InMemoryCache {
        "addTypename": true,
        "cacheKeyRoot": CacheKeyNode {
          "children": null,
          "key": null,
        },
        "config": Object {
          "addTypename": true,
          "dataIdFromObject": [Function],
          "fragmentMatcher": HeuristicFragmentMatcher {},
          "resultCaching": true,
        },
        "data": DepTrackingCache {
          "data": Object {
            "ROOT_QUERY": Object {
              "isAuthenticated": false,
            },
          },
          "depend": [Function],
        },
        "maybeBroadcastWatch": [Function],
        "optimisticData": DepTrackingCache {
          "data": Object {
            "ROOT_QUERY": Object {
              "isAuthenticated": false,
            },
          },
          "depend": [Function],
        },
        "silenceBroadcast": false,
        "storeReader": StoreReader {
          "cacheKeyRoot": CacheKeyNode {
            "children": null,
            "key": null,
          },
          "executeSelectionSet": [Function],
          "executeStoreQuery": [Function],
        },
        "storeWriter": StoreWriter {},
        "typenameDocumentCache": Map {
          Object {
            "definitions": Array [
              Object {
                "kind": "OperationDefinition",
                "name": Object {
                  "kind": "Name",
                  "value": "GeneratedClientQuery",
                },
                "operation": "query",
                "selectionSet": Object {
                  "kind": "SelectionSet",
                  "selections": Array [
                    Object {
                      "kind": "Field",
                      "name": Object {
                        "kind": "Name",
                        "value": "isAuthenticated",
                      },
                      "selectionSet": undefined,
                    },
                  ],
                },
              },
            ],
            "kind": "Document",
          } => Object {
            "definitions": Array [
              Object {
                "kind": "OperationDefinition",
                "name": Object {
                  "kind": "Name",
                  "value": "GeneratedClientQuery",
                },
                "operation": "query",
                "selectionSet": Object {
                  "kind": "SelectionSet",
                  "selections": Array [
                    Object {
                      "kind": "Field",
                      "name": Object {
                        "kind": "Name",
                        "value": "isAuthenticated",
                      },
                      "selectionSet": undefined,
                    },
                  ],
                },
              },
            ],
            "kind": "Document",
          },
        },
        "watches": Set {},
      },
      "clearStoreCallbacks": Array [],
      "clientAwareness": Object {},
      "defaultOptions": Object {},
      "disableNetworkFetches": false,
      "link": ApolloLink {
        "request": [Function],
      },
      "mutate": [Function],
      "query": [Function],
      "queryDeduplication": true,
      "reFetchObservableQueries": [Function],
      "resetStore": [Function],
      "resetStoreCallbacks": Array [],
      "ssrMode": false,
      "store": DataStore {
        "cache": InMemoryCache {
          "addTypename": true,
          "cacheKeyRoot": CacheKeyNode {
            "children": null,
            "key": null,
          },
          "config": Object {
            "addTypename": true,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "resultCaching": true,
          },
          "data": DepTrackingCache {
            "data": Object {
              "ROOT_QUERY": Object {
                "isAuthenticated": false,
              },
            },
            "depend": [Function],
          },
          "maybeBroadcastWatch": [Function],
          "optimisticData": DepTrackingCache {
            "data": Object {
              "ROOT_QUERY": Object {
                "isAuthenticated": false,
              },
            },
            "depend": [Function],
          },
          "silenceBroadcast": false,
          "storeReader": StoreReader {
            "cacheKeyRoot": CacheKeyNode {
              "children": null,
              "key": null,
            },
            "executeSelectionSet": [Function],
            "executeStoreQuery": [Function],
          },
          "storeWriter": StoreWriter {},
          "typenameDocumentCache": Map {
            Object {
              "definitions": Array [
                Object {
                  "kind": "OperationDefinition",
                  "name": Object {
                    "kind": "Name",
                    "value": "GeneratedClientQuery",
                  },
                  "operation": "query",
                  "selectionSet": Object {
                    "kind": "SelectionSet",
                    "selections": Array [
                      Object {
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "isAuthenticated",
                        },
                        "selectionSet": undefined,
                      },
                    ],
                  },
                },
              ],
              "kind": "Document",
            } => Object {
              "definitions": Array [
                Object {
                  "kind": "OperationDefinition",
                  "name": Object {
                    "kind": "Name",
                    "value": "GeneratedClientQuery",
                  },
                  "operation": "query",
                  "selectionSet": Object {
                    "kind": "SelectionSet",
                    "selections": Array [
                      Object {
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "isAuthenticated",
                        },
                        "selectionSet": undefined,
                      },
                    ],
                  },
                },
              ],
              "kind": "Document",
            },
          },
          "watches": Set {},
        },
      },
      "version": "2.4.12",
      "watchQuery": [Function],
    }
  }
>
  <div
    className="app"
  >
    <BrowserRouter>
      <Switch>
        <Apollo(PrivateRoute)
          component={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "type": [Function],
            }
          }
          exact={true}
          path="/"
        />
        <Route
          component={[Function]}
          exact={true}
          path="/auth"
        />
        <Redirect
          push={false}
          to="/"
        />
      </Switch>
    </BrowserRouter>
  </div>
</ApolloProvider>
`;
